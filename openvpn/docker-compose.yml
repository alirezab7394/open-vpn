version: "3.8"

services:
  # OpenVPN Server
  openvpn-server:
    image: kylemanna/openvpn:latest
    container_name: openvpn-server
    ports:
      - "1194:1194/udp"
      - "8080:8080"
    volumes:
      - ./data/openvpn:/etc/openvpn
      - ./scripts:/scripts
    environment:
      - OVPN_DATA=/etc/openvpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    sysctls:
      - net.ipv4.ip_forward=1
    networks:
      - openvpn-network
    restart: unless-stopped

  # OpenVPN Access Server (Alternative - more features)
  openvpn-as:
    image: linuxserver/openvpn-as:latest
    container_name: openvpn-as
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - INTERFACE=eth0
    volumes:
      - ./data/openvpn-as:/config
    ports:
      - "943:943"
      - "9443:9443"
      - "1194:1194/udp"
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    sysctls:
      - net.ipv4.ip_forward=1
    networks:
      - openvpn-network
    restart: unless-stopped

  # Web Management UI
  openvpn-ui:
    image: nginx:alpine
    container_name: openvpn-ui
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./ui:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./data/ssl:/etc/nginx/ssl
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-localhost}
      - NGINX_PORT=80
    networks:
      - openvpn-network
    restart: unless-stopped
    depends_on:
      - openvpn-api

  # API Backend for OpenVPN management
  openvpn-api:
    image: node:16-alpine
    container_name: openvpn-api
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app
      - ./data:/app/data
      - ./data/openvpn:/app/openvpn
    environment:
      - NODE_ENV=production
      - PORT=3000
      - OPENVPN_CONFIG_PATH=/app/openvpn
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - PUBLIC_IP=${PUBLIC_IP:-localhost}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    command: sh -c "npm install && npm start"
    networks:
      - openvpn-network
    restart: unless-stopped

  # Certificate Authority Management
  openvpn-ca:
    image: alpine:latest
    container_name: openvpn-ca
    volumes:
      - ./data/ca:/ca
      - ./scripts:/scripts
    command: tail -f /dev/null
    networks:
      - openvpn-network
    restart: unless-stopped

  # Database for user management
  postgres:
    image: postgres:13-alpine
    container_name: openvpn-postgres
    environment:
      - POSTGRES_DB=openvpn
      - POSTGRES_USER=openvpn
      - POSTGRES_PASSWORD=${ADMIN_PASSWORD:-admin123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - openvpn-network
    restart: unless-stopped

  # Redis for session management
  redis:
    image: redis:alpine
    container_name: openvpn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - openvpn-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: openvpn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - openvpn-network
    restart: unless-stopped

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: openvpn-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - openvpn-network
    restart: unless-stopped

  # Log aggregation with ELK Stack (optional)
  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: openvpn-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - openvpn-network
    restart: unless-stopped

  # Backup service
  backup:
    image: alpine:latest
    container_name: openvpn-backup
    volumes:
      - ./data:/backup/data
      - ./scripts:/scripts
    environment:
      - BACKUP_INTERVAL=24h
      - BACKUP_RETENTION=7
    command: /scripts/backup.sh
    networks:
      - openvpn-network
    restart: unless-stopped

networks:
  openvpn-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
